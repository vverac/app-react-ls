{"ast":null,"code":"var _jsxFileName = \"/Users/viviana/Desktop/ejercicios/fazt/app-react-localstorage/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //const [variable, funcion que me permite actualizar la variable] = useState()\n  // entonces para llenar esta variable usamos la funcion setnewTaskName(ver onChange)\n  const [newTaskName, setnewTaskName] = useState();\n\n  const handleSubmit = e => {\n    e.preventDefault(); // cancela el efecto de enviar datos al backend \n    // alert('sended')\n    // guardando en el localstorage\n\n    localStorage.setItem('task', newTaskName); // una vez guardado quiero limpiar mi input\n\n    setnewTaskName('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [\"  \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter a new task\",\n        value: newTaskName,\n        onChange: e => {\n          // cuando el usuario tipee el valor lo guardare en una variable para usarlo despues llamando onChange\n          // asi capturo lo que se escribe en este input pero aun no lo guardo para ello lo tengo que guardar en un estado\n          // (viene de 7)entonces aca  a medoda que tipees llenaras la variable con la funcion setnewtaskname\n          setnewTaskName(e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Save task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"wKuiyLw9dE8yaSZ+ok8eiDVbmkc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","App","newTaskName","setnewTaskName","handleSubmit","e","preventDefault","localStorage","setItem","target","value"],"sources":["/Users/viviana/Desktop/ejercicios/fazt/app-react-localstorage/src/App.js"],"sourcesContent":["import { useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  //const [variable, funcion que me permite actualizar la variable] = useState()\n  // entonces para llenar esta variable usamos la funcion setnewTaskName(ver onChange)\n  const [newTaskName, setnewTaskName] = useState()\n\n  const handleSubmit = (e) => {\n    e.preventDefault()// cancela el efecto de enviar datos al backend \n    // alert('sended')\n    // guardando en el localstorage\n    localStorage.setItem('task', newTaskName)\n    // una vez guardado quiero limpiar mi input\n    setnewTaskName('')\n  }\n\n  return (\n    <div className=\"App\">\n\n      <form onSubmit={handleSubmit} >  {/* si al boton le saco onClick el boton solo enviaria el evento del formulario\n      que es el onsubmit(evento de envio a un backend, pero ene este caso como no tenemos back lo usaremos para capturar los datos\n      antes de que se envien)  y como la pagina se refersca entonces para capturar este evento lo hacemoss en una funcion aparte handleSubmit*/}\n\n        <input\n          type=\"text\"\n          placeholder=\"Enter a new task\"\n          value={newTaskName}\n          onChange={(e) => { // cuando el usuario tipee el valor lo guardare en una variable para usarlo despues llamando onChange\n            // asi capturo lo que se escribe en este input pero aun no lo guardo para ello lo tengo que guardar en un estado\n            // (viene de 7)entonces aca  a medoda que tipees llenaras la variable con la funcion setnewtaskname\n            setnewTaskName(e.target.value);\n          }}\n        />\n        <button\n        // onClick={() => { //capturando el evento click que me sirve para cuando el usuario haga click yo vea el valor del input\n        //   alert(newTaskName);\n        // }}\n        >\n          Save task\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAO,WAAP;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EACb;EACA;EACA,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCH,QAAQ,EAA9C;;EAEA,MAAMI,YAAY,GAAIC,CAAD,IAAO;IAC1BA,CAAC,CAACC,cAAF,GAD0B,CACR;IAClB;IACA;;IACAC,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BN,WAA7B,EAJ0B,CAK1B;;IACAC,cAAc,CAAC,EAAD,CAAd;EACD,CAPD;;EASA,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,uBAEE;MAAM,QAAQ,EAAEC,YAAhB;MAAA,8BAIE;QACE,IAAI,EAAC,MADP;QAEE,WAAW,EAAC,kBAFd;QAGE,KAAK,EAAEF,WAHT;QAIE,QAAQ,EAAGG,CAAD,IAAO;UAAE;UACjB;UACA;UACAF,cAAc,CAACE,CAAC,CAACI,MAAF,CAASC,KAAV,CAAd;QACD;MARH;QAAA;QAAA;QAAA;MAAA,QAJF,eAcE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAdF;IAAA;MAAA;MAAA;MAAA;IAAA;EAFF;IAAA;IAAA;IAAA;EAAA,QADF;AA2BD;;GAzCQT,G;;KAAAA,G;AA2CT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}