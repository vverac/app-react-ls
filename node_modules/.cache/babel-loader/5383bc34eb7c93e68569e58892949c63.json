{"ast":null,"code":"var _jsxFileName = \"/Users/viviana/Desktop/ejercicios/fazt/app-react-localstorage/src/components/TaskTable.js\";\n// ahora en una tabla mostrare solo las tareas por hacer \n// \nimport React from 'react';\nimport TaskRow from './TaskRow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TaskTable = _ref => {\n  let {\n    tasks,\n    toggleTask\n  } = _ref;\n\n  const taskTableRow = doneValue => {\n    // pasamos como parametro doneValue y lo vemos por consola\n    console.log(doneValue); //para recibirlo, en la funcion que pusimos en tabla pasasmos true\n    // asi le puedo pasar un parametro, pero lo dejaremos en false para que la tabla miestre las tareas que no estan hechas\n    // para ello antes de retornar las tareas aplicaremos un filtro, esto sera antes del map\n    // recordar que los metodos de los arreglos los puedo encadenar\n    // le diremos que filtre por cada una de las tareas en su propiedad done si es === a true , asi mantendra todas las tareas donde sea true\n\n    return tasks.filter().map(task => /*#__PURE__*/_jsxDEV(TaskRow, {\n      task: task,\n      toggleTask: toggleTask\n    }, task.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 11\n    }, this));\n  }; //lo que haremos es que basados en una propiedad cambiaremos lo valores\n\n\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Tareas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: // tasks.map(task => (\n      //   < TaskRow\n      //     task={task}\n      //     key={task.name}\n      //     toggleTask={toggleTask}\n      //   />\n      // ))\n      // lo primero quqe haremos es que esta logica que teniamos la llevaremos a una funcion aparte y para usarlo llamo a ala funcion\n      // la funcion sigue funcionando exactamente igual ahora trabajamos en la misma funcion \n      taskTableRow(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_c = TaskTable;\nexport default TaskTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskTable\");","map":{"version":3,"names":["React","TaskRow","TaskTable","tasks","toggleTask","taskTableRow","doneValue","console","log","filter","map","task","name"],"sources":["/Users/viviana/Desktop/ejercicios/fazt/app-react-localstorage/src/components/TaskTable.js"],"sourcesContent":["// ahora en una tabla mostrare solo las tareas por hacer \n// \nimport React from 'react';\nimport TaskRow from './TaskRow';\n\n\n\nconst TaskTable = ({ tasks, toggleTask }) => {\n\n  const taskTableRow = (doneValue) => { // pasamos como parametro doneValue y lo vemos por consola\n    console.log(doneValue) //para recibirlo, en la funcion que pusimos en tabla pasasmos true\n    // asi le puedo pasar un parametro, pero lo dejaremos en false para que la tabla miestre las tareas que no estan hechas\n    // para ello antes de retornar las tareas aplicaremos un filtro, esto sera antes del map\n    // recordar que los metodos de los arreglos los puedo encadenar\n    // le diremos que filtre por cada una de las tareas en su propiedad done si es === a true , asi mantendra todas las tareas donde sea true\n    return (\n      tasks\n        .filter()\n        .map(task => (\n          < TaskRow\n            task={task}\n            key={task.name}\n            toggleTask={toggleTask}\n          />\n        )))\n  } //lo que haremos es que basados en una propiedad cambiaremos lo valores\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Tareas</th>\n        </tr>\n      </thead>\n      <tbody>\n        {\n          // tasks.map(task => (\n          //   < TaskRow\n          //     task={task}\n          //     key={task.name}\n          //     toggleTask={toggleTask}\n          //   />\n          // ))\n\n          // lo primero quqe haremos es que esta logica que teniamos la llevaremos a una funcion aparte y para usarlo llamo a ala funcion\n          // la funcion sigue funcionando exactamente igual ahora trabajamos en la misma funcion \n          taskTableRow(false)\n        }\n      </tbody>\n    </table>\n  )\n}\n\nexport default TaskTable"],"mappings":";AAAA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;;;AAIA,MAAMC,SAAS,GAAG,QAA2B;EAAA,IAA1B;IAAEC,KAAF;IAASC;EAAT,CAA0B;;EAE3C,MAAMC,YAAY,GAAIC,SAAD,IAAe;IAAE;IACpCC,OAAO,CAACC,GAAR,CAAYF,SAAZ,EADkC,CACX;IACvB;IACA;IACA;IACA;;IACA,OACEH,KAAK,CACFM,MADH,GAEGC,GAFH,CAEOC,IAAI,iBACP,QAAE,OAAF;MACE,IAAI,EAAEA,IADR;MAGE,UAAU,EAAEP;IAHd,GAEOO,IAAI,CAACC,IAFZ;MAAA;MAAA;MAAA;IAAA,QAHJ,CADF;EAUD,CAhBD,CAF2C,CAkBzC;;;EAEF,oBACE;IAAA,wBACE;MAAA,uBACE;QAAA,uBACE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADF,eAME;MAAA,UAEI;MACA;MACA;MACA;MACA;MACA;MACA;MAEA;MACA;MACAP,YAAY,CAAC,KAAD;IAZhB;MAAA;MAAA;MAAA;IAAA,QANF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAwBD,CA5CD;;KAAMH,S;AA8CN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}