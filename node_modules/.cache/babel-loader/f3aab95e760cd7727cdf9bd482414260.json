{"ast":null,"code":"var _jsxFileName = \"/Users/viviana/Desktop/ejercicios/fazt/app-react-localstorage/src/components/TaskCreator.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TaskCreator = () => {\n  _s();\n\n  //const [variable, funcion que me permite actualizar la variable] = useState()\n  // entonces para llenar esta variable usamos la funcion setnewTaskName(ver onChange)\n  const [newTaskName, setnewTaskName] = useState();\n\n  const handleSubmit = e => {\n    e.preventDefault(); // cancela el efecto de enviar datos al backend \n    // alert('sended')\n    // guardando en el localstorage\n\n    localStorage.setItem('task', newTaskName); // una vez guardado quiero limpiar mi input\n\n    setnewTaskName('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [\"  \", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter a new task\",\n      value: newTaskName //muestra el valor del estado que es vacio\n      ,\n      onChange: e => {\n        // cuando el usuario tipee el valor lo guardare en una variable para usarlo despues llamando onChange\n        // asi capturo lo que se escribe en este input pero aun no lo guardo para ello lo tengo que guardar en un estado\n        // (viene de 7)entonces aca  a medoda que tipees llenaras la variable con la funcion setnewtaskname\n        setnewTaskName(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Save task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TaskCreator, \"wKuiyLw9dE8yaSZ+ok8eiDVbmkc=\");\n\n_c = TaskCreator;\nexport default TaskCreator;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskCreator\");","map":{"version":3,"names":["useState","React","TaskCreator","newTaskName","setnewTaskName","handleSubmit","e","preventDefault","localStorage","setItem","target","value"],"sources":["/Users/viviana/Desktop/ejercicios/fazt/app-react-localstorage/src/components/TaskCreator.js"],"sourcesContent":["\nimport { useState } from \"react\";\nimport React from 'react'\n\n\n\nconst TaskCreator = () => {\n\n  //const [variable, funcion que me permite actualizar la variable] = useState()\n  // entonces para llenar esta variable usamos la funcion setnewTaskName(ver onChange)\n  const [newTaskName, setnewTaskName] = useState()\n\n  const handleSubmit = (e) => {\n    e.preventDefault()// cancela el efecto de enviar datos al backend \n    // alert('sended')\n    // guardando en el localstorage\n    localStorage.setItem('task', newTaskName)\n    // una vez guardado quiero limpiar mi input\n    setnewTaskName('')\n  }\n\n  return (\n    <form onSubmit={handleSubmit} >  {/* si al boton le saco onClick el boton solo enviaria el evento del formulario\n      que es el onsubmit(evento de envio a un backend, pero ene este caso como no tenemos back lo usaremos para capturar los datos\n      antes de que se envien)  y como la pagina se refersca entonces para capturar este evento lo hacemoss en una funcion aparte handleSubmit*/}\n\n      <input\n        type=\"text\"\n        placeholder=\"Enter a new task\"\n        value={newTaskName} //muestra el valor del estado que es vacio\n        onChange={(e) => { // cuando el usuario tipee el valor lo guardare en una variable para usarlo despues llamando onChange\n          // asi capturo lo que se escribe en este input pero aun no lo guardo para ello lo tengo que guardar en un estado\n          // (viene de 7)entonces aca  a medoda que tipees llenaras la variable con la funcion setnewtaskname\n          setnewTaskName(e.target.value);\n        }}\n      />\n      <button\n      // onClick={() => { //capturando el evento click que me sirve para cuando el usuario haga click yo vea el valor del input\n      //   alert(newTaskName);\n      // }}\n      >\n        Save task\n      </button>\n    </form>\n  )\n}\n\nexport default TaskCreator"],"mappings":";;;AACA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAIA,MAAMC,WAAW,GAAG,MAAM;EAAA;;EAExB;EACA;EACA,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,EAA9C;;EAEA,MAAMK,YAAY,GAAIC,CAAD,IAAO;IAC1BA,CAAC,CAACC,cAAF,GAD0B,CACR;IAClB;IACA;;IACAC,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BN,WAA7B,EAJ0B,CAK1B;;IACAC,cAAc,CAAC,EAAD,CAAd;EACD,CAPD;;EASA,oBACE;IAAM,QAAQ,EAAEC,YAAhB;IAAA,8BAIE;MACE,IAAI,EAAC,MADP;MAEE,WAAW,EAAC,kBAFd;MAGE,KAAK,EAAEF,WAHT,CAGsB;MAHtB;MAIE,QAAQ,EAAGG,CAAD,IAAO;QAAE;QACjB;QACA;QACAF,cAAc,CAACE,CAAC,CAACI,MAAF,CAASC,KAAV,CAAd;MACD;IARH;MAAA;MAAA;MAAA;IAAA,QAJF,eAcE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAdF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAwBD,CAvCD;;GAAMT,W;;KAAAA,W;AAyCN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}